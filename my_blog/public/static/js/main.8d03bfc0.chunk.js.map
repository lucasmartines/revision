{"version":3,"sources":["serviceWorker.js","components/PostList.components.js","pages/FrontPage/FrontPage.pages.js","index.js","pages/admin/Admin.page.js"],"names":["Boolean","window","location","hostname","match","posts","console","log","className","map","title","body","key","src","FrontPage","props","useState","setPost","useLocation","useEffect","fetch","then","response","json","splice","ReactDOM","render","StrictMode","path","exact","component","titulo","conteudo","novoPost","setNovoPost","changeValue","e","target","name","value","handleSubmit","preventDefault","file","files","length","onSubmit","for","onChange","type","rows","cols","onClick","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mEChBS,G,MAAA,YAAc,IAAZC,EAAW,EAAXA,MAEbC,QAAQC,IAAI,OAAOF,GAiBnB,OACI,6BACI,+CACA,wBAAIG,UAAU,eAdXH,IAAK,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAOI,KAClB,gBAAEC,EAAF,EAAEA,MAAMC,EAAR,EAAQA,KAAR,OACG,wBAAIC,IAAKF,GACL,yBAAKF,UAAU,aAAaK,IAAI,oCAChC,4BAAKH,GACL,+BAAKC,YCsBVG,MA9Bf,SAAoBC,GACnB,IAAD,EACyBC,mBAAS,IADlC,mBACOX,EADP,KACcY,EADd,KAKMf,EAAWgB,cAiBf,OAfAC,qBAAW,WAETC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAEJN,EAASM,EAAKC,OAAO,EAAE,QAGzBlB,QAAQC,IAAKL,KACb,CAAEA,IAMJ,yBAAKM,UAAU,aACb,kBAAC,EAAD,CAAoBH,MAAOA,M,uBCbjCoB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KAGE,kBAAC,IAAD,KAKE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWhB,IACjC,kBAAC,IAAD,CAAOc,KAAK,SAASC,OAAK,EAACC,UCxBpB,YAAS,qBAEUd,mBAAS,CACnCe,OAAO,GACPC,SAAS,KAJM,mBAEdC,EAFc,KAELC,EAFK,KAabC,EAAc,SAAEC,GAAQ,IAAD,EACNA,EAAEC,OAAhBC,EADoB,EACpBA,KAAKC,EADe,EACfA,MAGVL,EAAY,2BAAKD,GAAN,kBAAgBK,EAAMC,MAG/BC,EAAe,SAACJ,GAClBA,EAAEK,iBACFnC,QAAQC,IAAK,OAAQ6B,EAAEC,OAAOK,KAAKC,MAAM,IACrCV,EAASF,OAAOa,QAAUX,EAASD,SAASY,QAC5CtC,QAAQC,IAAI0B,IAGpB,OACI,oCACA,4CACA,yBAAKzB,UAAU,cAEX,0BAAMqC,SAAUL,GACZ,2BAAOM,IAAI,UAAX,QACA,2BAAOR,KAAK,SAASC,MAAON,EAASF,OAAQgB,SAAUZ,IACvD,2BAAOW,IAAI,QAAX,QACA,2BAAOR,KAAK,OAAOU,KAAK,SACxB,2BAAOF,IAAI,YAAX,YACA,8BAAUG,KAAM,GAAIC,KAAM,GAAIZ,KAAK,WAAWC,MAAON,EAASD,SAAUe,SAAUZ,IAClF,4BAAQgB,QAAS,kBAAMX,IAAvB,4BAEJ,6BACI,4BACI,wCACA,wCACA,kDDflBY,SAASC,eAAe,SH+FpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.8d03bfc0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\n\r\nexport default ({posts}) => {\r\n\r\n    console.log(\"arr:\",posts )\r\n\r\n\r\n\r\n    let showPostList = () => \r\n    {\r\n        return posts && posts?.map (\r\n             ({title,body}) => (\r\n                <li key={title}>\r\n                    <img className=\"float-left\" src=\"https://via.placeholder.com/150\"  />\r\n                    <h2>{title}</h2>\r\n                    <p> {body}</p>\r\n                </li>\r\n            )\r\n        ) \r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h2> Ultimos Posts </h2>\r\n            <ul className=\"flex-column\">\r\n                {showPostList()}\r\n            </ul>\r\n        </div>\r\n    )\r\n}","import React,{useState,useEffect} from 'react';\n\nimport { useLocation } from 'react-router-dom'\nimport './FrontPage.style.css';\nimport PostListComponents from '../../components/PostList.components';\n\n\nfunction FrontPage( props ) \n{\n  let [posts, setPost] = useState([])\n\n\n  \n  let location = useLocation()\n\n  useEffect( () => {\n\n    fetch('https://jsonplaceholder.typicode.com/posts')\n      .then(response => response.json())\n      .then(json => {\n\n        setPost( json.splice(0,10) )\n      })\n\n      console.log( location )\n  } , [ location ] )\n\n\n\n\n  return (\n    <div className=\"FrontPage\">\n      <PostListComponents posts={posts} />\n    </div>\n  );\n}\n\nexport default FrontPage;\n","import * as serviceWorker from './serviceWorker';\n\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {\n  HashRouter as Router,\n  Route,\n  Switch\n} from 'react-router-dom'\n\n\nimport './index.scss';\n\n\nimport FrontPage from './pages/FrontPage/FrontPage.pages'\nimport Admin from './pages/admin/Admin.page'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n\n\n      <Switch>\n\n\n\n\n        <Route path=\"/\" exact component={FrontPage} />\n        <Route path=\"/admin\" exact component={Admin} />\n\n\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React,{useState} from 'react'\r\n\r\n\r\n\r\n\r\n\r\nexport default ({}) => {\r\n\r\n    let [novoPost,setNovoPost]  = useState({\r\n        titulo:\"\",\r\n        conteudo:\"\"\r\n    })\r\n    \r\n\r\n    const submit = ( values ) => {\r\n        console.log( values )\r\n        values.preventDefault()\r\n    }\r\n\r\n    const changeValue = ( e ) => {\r\n        let {name,value} = e.target \r\n        \r\n\r\n        setNovoPost({ ...novoPost,[name]:value}  )\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault()\r\n        console.log( \"ff::\", e.target.file.files[0] )\r\n        if( novoPost.titulo.length && novoPost.conteudo.length ){\r\n            console.log(novoPost)\r\n        }\r\n    }\r\n    return(\r\n        <>\r\n        <h2> Admin Blog </h2>\r\n        <div className=\"admin-page\">\r\n            \r\n            <form onSubmit={handleSubmit}>\r\n                <label for=\"titulo\">Nome</label>\r\n                <input name=\"titulo\" value={novoPost.titulo} onChange={changeValue} />\r\n                <label for=\"file\">File</label>\r\n                <input name=\"file\" type=\"file\"/>\r\n                <label for=\"conteudo\">Conteudo</label>\r\n                <textarea rows={10} cols={60} name=\"conteudo\" value={novoPost.conteudo} onChange={changeValue} />\r\n                <button onClick={() => handleSubmit}> Inserir/Atualizar Post</button>\r\n            </form>\r\n            <div>\r\n                <ul>\r\n                    <li> Blog 1 </li>\r\n                    <li> Blog 2 </li>\r\n                    <li> Blog 3 </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}"],"sourceRoot":""}